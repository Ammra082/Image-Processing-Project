{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "417ae796-c0ea-4441-bca7-12f1599abd5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# app.py - Interactive CIFAR-10 Dashboard\n",
    "import streamlit as st\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from tensorflow.keras import datasets, models\n",
    "import tensorflow as tf\n",
    "import cv2\n",
    "from PIL import Image\n",
    "import io\n",
    "import time\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from ultralytics import YOLO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6ad2c1c1-f687-4202-bba2-eed0bbfdf815",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load YOLO model with exception handling\n",
    "@st.cache_resource\n",
    "def load_yolo_model():\n",
    "    try:\n",
    "        yolo_model = YOLO('yolov8n.pt')\n",
    "        return yolo_model\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error loading YOLO model: {str(e)}\")\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a1c54364-e50b-4306-88c5-9718904ff4a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load CIFAR-10 model with exception handling\n",
    "@st.cache_resource\n",
    "def load_cifar_model():\n",
    "    try:\n",
    "        model = models.load_model('saved_models/cifar10_model.keras')\n",
    "        return model\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error loading CIFAR-10 model: {str(e)}\")\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a902cfcf-a786-40a4-bd1c-c18c74870cb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_cifar10():\n",
    "    try:\n",
    "        (_, _), (test_images, test_labels) = datasets.cifar10.load_data()\n",
    "        test_images = test_images / 255.0  # Normalize images\n",
    "        class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', \n",
    "                       'dog', 'frog', 'horse', 'ship', 'truck']\n",
    "        return test_images, test_labels, class_names\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error loading CIFAR-10 dataset: {str(e)}\")\n",
    "        return None, None, None\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a65dbb1f-8439-477f-80ac-1e96c1d206c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "@st.cache_resource\n",
    "def load_cifar10():\n",
    "    try:\n",
    "        (_, _), (test_images, test_labels) = datasets.cifar10.load_data()\n",
    "        test_images = test_images / 255.0  # Normalize images\n",
    "        class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', \n",
    "                       'dog', 'frog', 'horse', 'ship', 'truck']\n",
    "        return test_images, test_labels, class_names\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error loading CIFAR-10 dataset: {str(e)}\")\n",
    "        return None, None, None\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "47068537-7880-4245-8504-c13e8a5a0ce1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to make predictions with exception handling\n",
    "def predict_image(model, image, class_names):\n",
    "    try:\n",
    "        # Resize to 32x32 if needed\n",
    "        if image.shape != (32, 32, 3):\n",
    "            image = cv2.resize(image, (32, 32))\n",
    "        \n",
    "        # Ensure correct dimensions and normalization\n",
    "        image_array = np.array(image) / 255.0\n",
    "        image_array = np.expand_dims(image_array, axis=0)\n",
    "        \n",
    "        # Make prediction\n",
    "        start_time = time.time()\n",
    "        prediction = model.predict(image_array)\n",
    "        end_time = time.time()\n",
    "        \n",
    "        # Get results\n",
    "        predicted_class = np.argmax(prediction[0])\n",
    "        confidence = prediction[0][predicted_class]\n",
    "        inference_time = end_time - start_time\n",
    "        \n",
    "        return {\n",
    "            'class': class_names[predicted_class],\n",
    "            'confidence': confidence,\n",
    "            'all_confidences': prediction[0],\n",
    "            'inference_time': inference_time\n",
    "        }\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error during prediction: {str(e)}\")\n",
    "        return None\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "11ebc4a6-9c3c-4e0f-9027-d0997bdf260b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function for YOLO object detection with exception handling\n",
    "def detect_objects(yolo_model, image):\n",
    "    try:\n",
    "        # Save image temporarily\n",
    "        temp_path = 'temp_image.jpg'\n",
    "        cv2.imwrite(temp_path, cv2.cvtColor(image, cv2.COLOR_RGB2BGR))\n",
    "        \n",
    "        # Run YOLO detection\n",
    "        results = yolo_model(temp_path)\n",
    "        \n",
    "        # Process results\n",
    "        result_image = results[0].plot()\n",
    "        result_image = cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB)\n",
    "        \n",
    "        # Get detection details\n",
    "        detections = []\n",
    "        if len(results[0].boxes) > 0:\n",
    "            for box in results[0].boxes:\n",
    "                cls_id = int(box.cls[0].item())\n",
    "                conf = box.conf[0].item()\n",
    "                cls_name = results[0].names[cls_id]\n",
    "                detections.append({'class': cls_name, 'confidence': conf})\n",
    "        \n",
    "        return result_image, detections\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error during object detection: {str(e)}\")\n",
    "        return None, []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1b2d9efb-af42-43b7-bf1d-b63ed24addb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Image preprocessing functions with exception handling\n",
    "def apply_preprocessing(image, technique):\n",
    "    try:\n",
    "        image_uint8 = (image * 255).astype(np.uint8) if image.max() <= 1.0 else image.astype(np.uint8)\n",
    "        \n",
    "        if technique == 'Original':\n",
    "            return image_uint8\n",
    "        elif technique == 'Grayscale':\n",
    "            gray = cv2.cvtColor(image_uint8, cv2.COLOR_RGB2GRAY)\n",
    "            return cv2.cvtColor(gray, cv2.COLOR_GRAY2RGB)  # Convert back to 3 channels\n",
    "        elif technique == 'Blur':\n",
    "            return cv2.GaussianBlur(image_uint8, (5, 5), 0)\n",
    "        elif technique == 'Edge Detection':\n",
    "            edges = cv2.Canny(cv2.cvtColor(image_uint8, cv2.COLOR_RGB2GRAY), 100, 200)\n",
    "            return cv2.cvtColor(edges, cv2.COLOR_GRAY2RGB)\n",
    "        elif technique == 'Histogram Equalization':\n",
    "            img_yuv = cv2.cvtColor(image_uint8, cv2.COLOR_RGB2YUV)\n",
    "            img_yuv[:,:,0] = cv2.equalizeHist(img_yuv[:,:,0])\n",
    "            return cv2.cvtColor(img_yuv, cv2.COLOR_YUV2RGB)\n",
    "        elif technique == 'Sharpen':\n",
    "            kernel = np.array([[-1, -1, -1], [-1, 9, -1], [-1, -1, -1]])\n",
    "            return cv2.filter2D(image_uint8, -1, kernel)\n",
    "        elif technique == 'Invert':\n",
    "            return 255 - image_uint8\n",
    "        elif technique == 'Thresholding':\n",
    "            gray = cv2.cvtColor(image_uint8, cv2.COLOR_RGB2GRAY)\n",
    "            _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)\n",
    "            return cv2.cvtColor(thresh, cv2.COLOR_GRAY2RGB)\n",
    "        return image_uint8\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error applying preprocessing: {str(e)}\")\n",
    "        return image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f3842fb2-063c-4fb1-8bf7-ddb772d4c693",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Main app\n",
    "def main():\n",
    "    # Set page config\n",
    "    st.set_page_config(page_title=\"CIFAR-10 Image Analysis\", page_icon=\"🖼️\", layout=\"wide\")\n",
    "    \n",
    "    # Load models and data with exception handling\n",
    "    cifar_model = load_cifar_model()\n",
    "    yolo_model = load_yolo_model()\n",
    "    test_images, test_labels, class_names = load_cifar10()\n",
    "    \n",
    "    if cifar_model is None or yolo_model is None or test_images is None:\n",
    "        st.stop()  # Stop execution if models or dataset could not be loaded\n",
    "    \n",
    "    # App title and description\n",
    "    st.title(\"CIFAR-10 Image Analysis Dashboard\")\n",
    "    st.write(\"\"\"\n",
    "    This interactive dashboard allows you to explore CIFAR-10 image classification, \n",
    "    preprocessing techniques, and object detection using YOLO.\n",
    "    \"\"\")\n",
    "    \n",
    "    # Create tabs\n",
    "    tab1, tab2, tab3, tab4 = st.tabs([\"Image Classifier\", \"Image Preprocessing\", \"Object Detection\", \"Model Insights\"])\n",
    "    \n",
    "    # Tab 1: Image Classifier\n",
    "    with tab1:\n",
    "        st.header(\"CIFAR-10 Image Classification\")\n",
    "        \n",
    "        # Two columns for input options\n",
    "        col1, col2 = st.columns(2)\n",
    "        \n",
    "        with col1:\n",
    "            option = st.radio(\"Select input method:\", [\"Upload Image\", \"Choose from CIFAR-10\"])\n",
    "        \n",
    "        # Handle image input\n",
    "        if option == \"Upload Image\":\n",
    "            uploaded_file = st.file_uploader(\"Choose an image...\", type=[\"jpg\", \"jpeg\", \"png\"])\n",
    "            if uploaded_file is not None:\n",
    "                # Convert uploaded file to image\n",
    "                image = Image.open(uploaded_file).convert('RGB')\n",
    "                image_array = np.array(image)\n",
    "                st.image(image, caption=\"Uploaded Image\", width=300)\n",
    "                \n",
    "                if st.button(\"Classify Image\"):\n",
    "                    with st.spinner(\"Classifying...\"):\n",
    "                        if cifar_model is not None:\n",
    "                            result = predict_image(cifar_model, image_array, class_names)\n",
    "                            \n",
    "                            # Display results\n",
    "                            if result:\n",
    "                                st.success(f\"Predicted: {result['class']}\")\n",
    "                                st.info(f\"Confidence: {result['confidence']:.2%}\")\n",
    "                                st.info(f\"Inference Time: {result['inference_time']*1000:.2f}ms\")\n",
    "                                \n",
    "                                # Plot confidence bars\n",
    "                                fig, ax = plt.subplots(figsize=(10, 6))\n",
    "                                bars = ax.barh(class_names, result['all_confidences'], color='skyblue')\n",
    "                                bars[np.argmax(result['all_confidences'])].set_color('navy')\n",
    "                                ax.set_xlabel('Confidence')\n",
    "                                ax.set_title('Class Probabilities')\n",
    "                                st.pyplot(fig)\n",
    "        else:\n",
    "            # Random example from CIFAR-10\n",
    "            if st.button(\"Get Random Image\"):\n",
    "                idx = np.random.randint(0, len(test_images))\n",
    "                st.session_state['idx'] = idx\n",
    "            \n",
    "            if 'idx' not in st.session_state:\n",
    "                st.session_state['idx'] = np.random.randint(0, len(test_images))\n",
    "            \n",
    "            idx = st.session_state['idx']\n",
    "            image = test_images[idx]\n",
    "            true_label = class_names[test_labels[idx][0]]\n",
    "            \n",
    "            st.image(image, caption=f\"CIFAR-10 Image (True: {true_label})\", width=300)\n",
    "            \n",
    "            if st.button(\"Classify\"):\n",
    "                with st.spinner(\"Classifying...\"):\n",
    "                    if cifar_model is not None:\n",
    "                        result = predict_image(cifar_model, image, class_names)\n",
    "                        \n",
    "                        # Display results with emoji based on correctness\n",
    "                        if result['class'] == true_label:\n",
    "                            st.success(f\"✅ Correct! Predicted: {result['class']}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "b63f3064-ea40-43e0-ab16-3b18ac46af22",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
